Given a string S, find the longest palindromic substring in S.

Substring of string S:

S[i...j] where 0 <= i <= j < len(S)

Palindrome string:

A string which reads the same backwards. More formally, S is palindrome if reverse(S) = S.

Incase of conflict, return the substring which occurs first ( with the least starting index ).

Example :

Input : "aaaabaaa"
Output : "aaabaaa"
solution:[c++]
bool ispalin(string s) {
    if(s.length()<=1) return 1;
    for(int i=0;i<s.length();i++) {
        if(s[i]!=s[s.length()-1-i]) return false;
    }
    return true;
}


string Solution::longestPalindrome(string A) {
    string s="";
    for(int i=0;i<A.length();i++) {
        string a="";
        if(A.length()-i > s.length())
        for(int j=i;j<A.length();j++) {
            a = a+A[j];
            if(a.length()>s.length() && ispalin(a)) s = a;
        }
    }
    return s;
}
