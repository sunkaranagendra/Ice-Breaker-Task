Problem Description

Given an array of integers, A of length N, find out the maximum sum sub-array of non negative numbers from A.

The sub-array should be contiguous i.e., a sub-array created by choosing the second and fourth element and skipping the third element is invalid.

Maximum sub-array is defined in terms of the sum of the elements in the sub-array.

Find and return the required subarray.

NOTE:

If there is a tie, then compare with segment's length and return segment which has maximum length.
If there is still a tie, then return the segment with minimum starting index.


Problem Constraints
1 <= N <= 105
-109 <= A[i] <= 109



Input Format
The first and the only argument of input contains an integer array A, of length N.



Output Format
Return an array of integers, that is a subarray of A that satisfies the given conditions.



Example Input
Input 1:

 A = [1, 2, 5, -7, 2, 3]
Input 2:

 A = [10, -1, 2, 3, -4, 100]


Example Output
Output 1:

 [1, 2, 5]
Output 2:

 [100]
 
 
 
 
 
 solution:[python]
 
 class Solution:
    # @param A : list of integers
    # @return a list of integers
    def maxset(self, A):
        accum = []
        max_vec = []
        res = []
        for ndx, el in enumerate(A):
            if el >= 0:
                accum.append(el)
            
            if el < 0 or (ndx == len(A) - 1):
                if accum:
                    pot_vec = [sum(accum), len(accum)]
                    if pot_vec > max_vec:
                        max_vec = pot_vec
                        res = accum

                accum = []
            
        return res
            
        
            

 
 
